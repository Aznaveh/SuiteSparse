!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
C	Demo/Makefile	/^C = $(CXX) $(CF) $(SPQR_CONFIG) $(CONFIG_PARTITION) $(CONFIG_GPU) $(I) \\$/;"	m
C	Lib/Makefile	/^C = $(CXX) $(CF) $(SPQR_CONFIG) $(CHOLMOD_CONFIG) $(CONFIG_PARTITION) $(I)$/;"	m
CLIB	Demo/Makefile	/^CLIB = $(LDFLAGS) -L..\/..\/lib -lparu -lspqr -lsuitesparseconfig -lcholmod -lamd \\$/;"	m
Child	Include/Parallel_LU.hpp	/^    Int *Child ;    \/\/ size nf+1$/;"	m	struct:paru_symbolic
Childp	Include/Parallel_LU.hpp	/^    Int *Childp ;   \/\/ size nf+2$/;"	m	struct:paru_symbolic
Cm	Include/Parallel_LU.hpp	/^    Int *Cm ;               \/\/ size nf+1$/;"	m	struct:paru_symbolic
ColList	Include/Parallel_LU.hpp	/^    tupleList* ColList;  $/;"	m	struct:__anon4
DEBUGLEVEL	Include/Parallel_LU.hpp	16;"	d
DEBUGLEVEL	Include/Parallel_LU.hpp	19;"	d
Element	Include/Parallel_LU.hpp	/^} Element ;$/;"	t	typeref:struct:__anon2
FLIB	Demo/Makefile	/^FLIB = $(LAPACK) $(BLAS)$/;"	m
Fm	Include/Parallel_LU.hpp	/^    Int *Fm ;               \/\/ size nf+1$/;"	m	struct:paru_symbolic
I	Demo/Makefile	/^I = -I..\/..\/include $(I_WITH_SPQRGPU) -I ..\/Include$/;"	m
I	Lib/Makefile	/^I = -I..\/..\/SPQR\/Include -I..\/..\/CHOLMOD\/Include -I..\/..\/SuiteSparse_config -I..\/Include$/;"	m
INC	Lib/Makefile	/^INC = ..\/Include\/Parallel_LU.hpp$/;"	m
I_WITH_SPQRGPU	Demo/Makefile	/^I_WITH_SPQRGPU = $/;"	m
Int	Include/Parallel_LU.hpp	22;"	d
LIBRARY	Lib/Makefile	/^LIBRARY = libparu$/;"	m
LIBS	Demo/Makefile	/^LIBS = $(CLIB) $(FLIB) $(TBB) $(GPULIB)$/;"	m
NPR	Include/Parallel_LU.hpp	10;"	d
NPR	Include/Parallel_LU.hpp	7;"	d
OBJ	Lib/Makefile	/^OBJ = \\$/;"	m
PRLEVEL	Include/Parallel_LU.hpp	15;"	d
PRLEVEL	Include/Parallel_LU.hpp	18;"	d
Parent	Include/Parallel_LU.hpp	/^    Int *Parent ;   \/\/ size nf+1$/;"	m	struct:paru_symbolic
RowList	Include/Parallel_LU.hpp	/^    tupleList* RowList;$/;"	m	struct:__anon4
SO_VERSION	Lib/Makefile	/^SO_VERSION = 0$/;"	m
SUITESPARSE	Makefile	/^SUITESPARSE ?= $(realpath $(CURDIR)\/..)$/;"	m
Sj	Include/Parallel_LU.hpp	/^    Int *Sj ;       \/\/ size anz = Sp [n], column indices of S$/;"	m	struct:paru_symbolic
Sleft	Include/Parallel_LU.hpp	/^    Int *Sleft ;    \/\/ size n+2.  The list of rows of S whose$/;"	m	struct:paru_symbolic
Sp	Include/Parallel_LU.hpp	/^    Int *Sp ;       \/\/ size m+1, row pointers of S$/;"	m	struct:paru_symbolic
Super	Include/Parallel_LU.hpp	/^    Int *Super ;    \/\/ size nf+1.  Super [f] gives the first$/;"	m	struct:paru_symbolic
Tuple	Include/Parallel_LU.hpp	/^} Tuple;$/;"	t	typeref:struct:__anon1
VERSION	Lib/Makefile	/^VERSION = 0.0.1$/;"	m
aChild	Include/Parallel_LU.hpp	/^    Int *aChild; \/\/ size m+nf+1$/;"	m	struct:paru_symbolic
aChildp	Include/Parallel_LU.hpp	/^    Int *aChildp; \/\/ size m+nf+2$/;"	m	struct:paru_symbolic
aParent	Include/Parallel_LU.hpp	/^    Int *aParent; \/\/ size m+nf+1$/;"	m	struct:paru_symbolic
anz	Include/Parallel_LU.hpp	/^    Int m, n, anz ; \/\/ S is m-by-n with anz entries$/;"	m	struct:paru_symbolic
e	Include/Parallel_LU.hpp	/^    int e,   \/*  element number *\/$/;"	m	struct:__anon1
elementList	Include/Parallel_LU.hpp	/^    Element** elementList; \/\/pointers to all elements, size = m+nf+1 $/;"	m	struct:__anon4
f	Include/Parallel_LU.hpp	/^        f;  \/*   offest *\/$/;"	m	struct:__anon1
list	Include/Parallel_LU.hpp	/^    Tuple* list;    \/* list of tuples regarding to this element *\/$/;"	m	struct:__anon3
m	Include/Parallel_LU.hpp	/^    Int m, n, anz ; \/\/ S is m-by-n with anz entries$/;"	m	struct:paru_symbolic
m	Include/Parallel_LU.hpp	/^    Int m, n;$/;"	m	struct:__anon4
main	Demo/aztest.cpp	/^int main (int argc, char **argv)$/;"	f
main	Demo/qrsimple.cpp	/^int main (int argc, char **argv)$/;"	f
main	Demo/testazny.cpp	/^int main (int argc, char **argv)$/;"	f
maxfn	Include/Parallel_LU.hpp	/^    Int maxfn ;     \/\/ max # of columns in any front$/;"	m	struct:paru_symbolic
mmread	Matrix/mmread.m	/^function  [A,rows,cols,entries,rep,field,symm] = mmread(filename)$/;"	f
mmwrite	Matrix/mmwrite.m	/^function [ err ] = mmwrite(filename,A,comment,field,precision)$/;"	f
n	Include/Parallel_LU.hpp	/^    Int m, n, anz ; \/\/ S is m-by-n with anz entries$/;"	m	struct:paru_symbolic
n	Include/Parallel_LU.hpp	/^    Int m, n;$/;"	m	struct:__anon4
ncols	Include/Parallel_LU.hpp	/^        ncols;		\/* number of columns *\/$/;"	m	struct:__anon2
ncolsleft	Include/Parallel_LU.hpp	/^        ncolsleft,	\/* number of columns remaining *\/$/;"	m	struct:__anon2
nf	Include/Parallel_LU.hpp	/^    Int nf ;        \/\/ number of frontal matrices; nf <= MIN (m,n)$/;"	m	struct:paru_symbolic
nrows	Include/Parallel_LU.hpp	/^        nrows,		\/* number of rows *\/$/;"	m	struct:__anon2
nrowsleft	Include/Parallel_LU.hpp	/^        nrowsleft,	\/* number of rows remaining *\/$/;"	m	struct:__anon2
numFree	Include/Parallel_LU.hpp	/^        numFree;    \/*  number of free spaces for newer tuples *\/$/;"	m	struct:__anon3
numTuple	Include/Parallel_LU.hpp	/^        numTuple,   \/*  number of Tuples in this element *\/$/;"	m	struct:__anon3
paralloc	Demo/paru_mem.h	/^void *paralloc(int n, int size, cholmod_common* cc)$/;"	f
paralloc	Source/paru_mem.cpp	/^void *paralloc(int n, int size, cholmod_common* cc){$/;"	f
paru_freesym	Demo/paru_mem.h	/^void paru_freesym(paru_symbolic** LUsym_handle,$/;"	f
paru_freesym	Source/paru_mem.cpp	/^void paru_freesym(paru_symbolic** LUsym_handle,$/;"	f
paru_init_rowFronts	Source/paru_init_rowFronts.cpp	/^void paru_init_rowFronts($/;"	f
paru_matrix	Include/Parallel_LU.hpp	/^}   paru_matrix;$/;"	t	typeref:struct:__anon4
paru_sym_analyse	Source/paru_sym_analyse.cpp	/^paru_symbolic * paru_sym_analyse$/;"	f
paru_symbolic	Include/Parallel_LU.hpp	/^struct paru_symbolic$/;"	s
print_level	Include/Parallel_LU.hpp	/^static int print_level = 0 ;$/;"	v
row2atree	Include/Parallel_LU.hpp	/^    Int *row2atree;               \/\/Mapping from rows to augmented tree size m$/;"	m	struct:paru_symbolic
super2atree	Include/Parallel_LU.hpp	/^    Int *super2atree;               \/\/Mapping from super nodes to augmented tree size m$/;"	m	struct:paru_symbolic
sym	Include/Parallel_LU.hpp	/^    paru_symbolic *sym;$/;"	m	struct:__anon4
tupleList	Include/Parallel_LU.hpp	/^}   tupleList;$/;"	t	typeref:struct:__anon3
